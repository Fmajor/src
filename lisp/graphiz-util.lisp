;;create dot name
(defun dot-name (exp)
  (substitute-if #\_ (complement #'alphanumericp) (prin1-to-string exp))
  )
;;create dot label
(defparameter *maximum-label-length* 30)
(defun dot-label (exp)
  (if exp
      (let ((s (write-to-string exp :pretty nil)))
	(if (> (length s) *maximum-label-length*)
	    (concatenate 'string (subseq s 0 (- *maximum-label-length* 3)) "...")
	    s)
	)
  "")
  )
;;print nodes to dot format
(defun nodes->dot (nodes)
  (mapc (lambda (node)
	  (fresh-line)
	  (princ (dot-name (car node)))
	  (princ "[label=\"")
	  (princ (dot-label node))
	  (princ "\"];")
	  )
	nodes)
  )
;;print edges to dot format
(defun edges->dot (edges)
  (mapc (lambda (node)
	  (mapc (lambda (edge)
		  (fresh-line)
		  (princ (dot-name (car node)))
		  (princ "->")
		  (princ (dot-name (car edge)))
		  (princ "[label=\"")
		  (princ (dot-label (cdr edge)))
		  (princ "\"];"))
		(cdr node))
	  )
	edges)
  )
;;print graph to dot format
(defun graph->dot-format (nodes edges)
  (princ "digraph{")
  (nodes->dot nodes)
  (edges->dot edges)
  (princ "}")
  )
;;write output to dot file
(defun dot->file (fname thunk)
  (with-open-file (*standard-output* fname
		   :direction :output
		   :if-exists :supersede)
    (funcall thunk))
  )
;;write output to png file
(defun dot->png (fname thunk)
  (dot->file fname thunk)
  (sb-ext:run-program "/usr/local/bin/dot" (list "-Tpng" "-O" (concatenate 'string fname)))
  )
;;print graph to png file
(defun graph->dot (fname nodes edges)
  (dot->png fname (lambda()
		    (graph->dot-format nodes edges))
	    )
  )
;;print non-direction edges to dot format
(defun uedges->dot (edges)
  (maplist (lambda (lst)
	     (mapc (lambda (edge)
		     (unless (assoc (car edge) (cdr lst))
		       (fresh-line)
		       (princ (dot-name (caar lst)))
		       (princ "--")
		       (princ (dot-name (car edge)))
		       (princ "[label=\"")
		       (princ (dot-label (cdr edge)))
		       (princ "\"];")))
		   (cdar lst))
	     )
	   edges)
  )
;;print non-direction graph to dot format
(defun ugraph->dot-format (nodes edges)
  (princ "graph{")
  (nodes->dot nodes)
  (uedges->dot edges)
  (princ "}")
  )
;;print non-direction graph to png
(defun ugraph->dot (fname nodes edges)
  (dot->png fname
	    (lambda()
	      (ugraph->dot-format nodes edges))
	    )
  )
